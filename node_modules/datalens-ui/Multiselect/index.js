/**
 * Select With one or more possible items selected in same time
 * @class
 * @extends external:H.ui.Control
 */
class Multiselect extends H.ui.Control {
    /**
     * @param [Array] values - array of objects,
     * where property name is value and label and color is a color of the label
     */
    constructor(values) {
        super();
        this.values = values;
    }
    renderInternal(el) {
        var i = 0;
        this.addClass('dl-multiselect');
        el.innerHTML = this.values.map((value) => {
            const title = value.name;
            const id = 'dl-multiselect-' + value.name;
            return `<div class="dl-multiselect__option">
                <input
                    class="dl-multiselect__input"
                    type="checkbox"
                    name="multiselect"
                    id="${id}"
                    value="${value.name}"
                    checked
                />
                <label
                    class="dl-multiselect__label"
                    style="color:${value.color}"
                    for="${id}"
                >${title}</label>
            </div>`
        }).join('');
        el.addEventListener('change', () => this.dispatchEvent('change'));
    }
    /**
     * @return {string[]} selected values
     */
    getValue() {
        const inputs = this.getElement().querySelectorAll(
            'input[checked]:checked'
        );
        const value = [];
        for (var i = 0; i < inputs.length; i++) {
            const input = inputs[i];
            value.push(input.value);
        }
        return value;
    }
    /**
     * @param {Array} values - array of strings of id's of boxes to be unselected
     */
    unselectBoxes(values) {
        let ele = this.getElement()
            .getElementsByClassName('dl-multiselect__input');
        for (let value of values) {
           ele.namedItem('dl-multiselect-' + value).checked = false;
        }
    }
}

export default Multiselect;
